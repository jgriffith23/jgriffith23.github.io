<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jennifer Griffith-Delgado</title>
    <description>Practicing, reflecting, and learning about software engineering, among other technical things.
</description>
    <link>http://jgriffith23.github.io/</link>
    <atom:link href="http://jgriffith23.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 10 Jul 2016 23:31:41 -0700</pubDate>
    <lastBuildDate>Sun, 10 Jul 2016 23:31:41 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Python Is Kind of Beautiful</title>
        <description>&lt;p&gt;There. I said it: a programming language is beautiful. Now I’m one of &lt;em&gt;those&lt;/em&gt; people. I’m okay with this.&lt;/p&gt;

&lt;p&gt;Kidding aside, I really never thought I’d describe a programming language with that word. Assembly is appealing to me not because it’s elegant but because when you use it, you have to understand every single little step the computer is taking to make something happen. I find C appealing because while it abstracts away a lot, there’s still not much magic to it. Everything goes in a particular place, you have to manage memory carefully, and pointers are pretty cool. Of course, C also gives you enough rope to hang yourself, but hey–debugging is half the fun, right?&lt;/p&gt;

&lt;p&gt;Given all that, I honestly wasn’t sure how much I’d like Python. I’ve always gotten a lot of satisfaction out of being able to see what’s going on under the hood and to understand what I’m seeing in a program. Python is growing on me, though. Being able to basically read your program like English without actually translating it to pseudocode is fantastic, and it makes Python a great option for beginners.&lt;/p&gt;

&lt;p&gt;Anyway, I learned a couple of really fascinating things this week that I wanted to jot down.&lt;/p&gt;

&lt;h1 id=&quot;slices-are-cool&quot;&gt;Slices Are Cool&lt;/h1&gt;

&lt;p&gt;There are a couple of Python elements that I had trouble getting my head around before Hackbright. Slicing is one of those elements. When you slice a list, set, or tuple, you’re asking Python to give you the elements from one index up to but not including another. A slice looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s an example with actual values:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;some_stuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this code, &lt;code class=&quot;highlighter-rouge&quot;&gt;some_stuff&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2]&lt;/code&gt;. When I first started messing with Python, I found the “up to but not including” part a little tricky. And don’t even get me started on stepping. Now, after some pair programming practice and a great homework assignment, I feel a lot more comfortable slicing things up, and I think the feature is pretty awesome. My favorite thing about slices is how Python always gives a simple, logical answer when you try to slice out of bounds. For instance, a line sort of like this appeared on one of our slides:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# This slice gives [].&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; is an empty list. Rather than give an error, Python basically says, “You want the stuff from indices 42 and up? There is no index 99, so there are no elements. That means the list of stuff from those indices is empty.” Pretty neat, right?&lt;/p&gt;

&lt;p&gt;Some other interesting slices:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#Gives [0, 1]  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#Gives [3, 2, 1, 0]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#Gives []&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First thing to note: In Python, you can have negative indices! They index from the end, where the last element in the list is at index -1. This gives you a super convenient way to work from the end of a list in Python, something that can be much more frustrating in other languages.&lt;/p&gt;

&lt;p&gt;In any case, the first slice above gives the elements from indices 0 to -2. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;stuff[:-2]&lt;/code&gt; is 2, you end up with the first two elements. The second slice above shows how combining a negative start index with a negative step value can let you reverse the list. The third slice is another great example of Python’s logic at work. There’s nothing in this list from indices 10 up to but not including 20, so the slice just gives an empty list.&lt;/p&gt;

&lt;h1 id=&quot;in-python-memory-actually-acts-like-a-box&quot;&gt;In Python, Memory Actually Acts Like a Box&lt;/h1&gt;

&lt;p&gt;You know how I like to know what’s going on under the hood in a program? Well, one lecture this week was all about memory, so I was psyched. And I discovered that some memory-related aspects of Python don’t work like I expected them to.&lt;/p&gt;

&lt;p&gt;Take variables, for example. In other languages, if you assign a value to a variable and then assign a new value, the old value gets overwritten in memory, never to be heard from again. It seems like an efficient system, especially since you don’t necessarily need to implement garbage collection. (Disclaimer: I don’t pretend to know it actually is efficient.)&lt;/p&gt;

&lt;p&gt;But think about how that might work in the physical world. Say you’ve got a box with a d6 in it. You want to play D&amp;amp;D, so you want to put a d20 in the box instead. You take the d6 out, place the d20 inside, and put the d6 outside the box. The d6 doesn’t poof out of existence–the box just no longer contains it.&lt;/p&gt;

&lt;p&gt;That’s how memory works in Python–it’s like a box. Boxes are a pretty standard metaphor for memory, but this is the first time I’ve seen a system that works so much like the classic metaphor in practice.&lt;/p&gt;

&lt;p&gt;Lists demonstrate the concept better, though. Say you’re looking at the following box:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;game_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencils&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;notepad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;holy staff&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, your friend wants to ride to D&amp;amp;D with you, so you ask her to check the box to make sure she has everything. You might say:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game_box&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In other languages, &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; would be a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;game_box&lt;/code&gt;, and changing &lt;code class=&quot;highlighter-rouge&quot;&gt;game_box&lt;/code&gt; wouldn’t affect &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; at all. Not so in Python. All you’ve done is put another sharpie label on the box.&lt;/p&gt;

&lt;p&gt;Your friend says, “I’m an archer, so I want to bring my bow and arrows to help me get into character.” (You’re playing a cleric, hence the holy staff.) So, you add her bow and arrows to &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; so she can get totally in character.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencils&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;notepad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;holy staff&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;bow and arrows&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since you and your friend are still looking at the same box, &lt;code class=&quot;highlighter-rouge&quot;&gt;game_box&lt;/code&gt; should now include &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;bow and arrows&#39;&lt;/code&gt; as well. I think Python 3 may have changed this, because it doesn’t work in the Python 3.4.3 Shell version of IDLE, but we’re using Python 2 at Hackbright, and that memory weirdness totally works there.&lt;/p&gt;

&lt;p&gt;This whole concept seemed so crazy to me at first, but once I started visualizing memory as a box that multiple people can look at, everything started making a lot more sense. It’s kind of an elegant way of handling rebinding values, and the analog to something in the physical world just works so well.&lt;/p&gt;

&lt;p&gt;I’ve been doodling visuals whenever I find a useful metaphor like this during lecture. Maybe I’ll draw those up and post them sometime…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quote of the day: 
“Wherever there’s an equals sign in Python, an arrow is being drawn somewhere.”
– A wise Hackbright instructor&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/hackbright/2016/07/08/Python-Is-Kind-of-Beautiful.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/hackbright/2016/07/08/Python-Is-Kind-of-Beautiful.html</guid>
        
        
        <category>Hackbright</category>
        
      </item>
    
      <item>
        <title>Two Days In</title>
        <description>&lt;p&gt;I’m two days into the engineering fellowship at &lt;a href=&quot;https://hackbrightacademy.com/&quot;&gt;Hackbright Academy&lt;/a&gt;, and while a lot of the computer science concepts have been overall a review, I’m still learning a ton.&lt;/p&gt;

&lt;p&gt;These are some of my takeaways so far, in no particular order.&lt;/p&gt;

&lt;h1 id=&quot;pair-programming-is-the-best&quot;&gt;Pair Programming is The Best&lt;/h1&gt;

&lt;p&gt;Literally. I can’t imagine a better way to solidify concepts than by using a pair programming system. I often tend to sketch solutions to problems at a high level and then dive into the code, but when you’re driving in a pair programming scenario, you can’t just try all the things. When you’re navigating, you have to collect your thoughts and explain them so that someone else can understand your reasoning.&lt;/p&gt;

&lt;p&gt;Pair programming really teaches you to step back, read the requirements for a project, plan your algorithm accordingly, and step through the code as you go. You might not get everything right the first time, but that’s okay. Having another full set of brain cells on the project makes debugging and refactoring much easier.&lt;/p&gt;

&lt;p&gt;I’m really looking forward to learning from my peers like this for the rest of the fellowship!&lt;/p&gt;

&lt;h1 id=&quot;the-linux-command-line-is-amazing&quot;&gt;The Linux Command Line Is Amazing&lt;/h1&gt;

&lt;p&gt;I haven’t done much with Linux in years, but between my own dabblings with Python, revisiting &lt;em&gt;Hacking: The Art of Exploitation&lt;/em&gt;, and starting at Hackbright, I have a renwewed appreciation for the command line. It’s so much faster to just do everything from the keyboard that I’m starting to resent clicking icons a little bit.&lt;/p&gt;

&lt;h1 id=&quot;git-isnt-so-bad&quot;&gt;Git Isn’t So Bad&lt;/h1&gt;

&lt;p&gt;Admittedly, I was intimidated by Git and GitHub before I started my freelance technical writing/editing work this summer. Using Git and GitHub for that helped ease me into version control, and while I’m still a little shaky at times whet it comes to getting things to GitHub, today’s lecture on Git won me over.&lt;/p&gt;

&lt;p&gt;My pair programming partner and I managed to completely overwrite our awesome solution to the day’s lab challenge, seemingly with no way to get the original contents back. Fortunately, however, we’d committed our last working code file to our project repo. After entering a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard&lt;/code&gt; command, we were back in business.&lt;/p&gt;

&lt;h1 id=&quot;read-the-docs&quot;&gt;Read the Docs&lt;/h1&gt;

&lt;p&gt;Stuck on a concept? Go to the docs. Man pages are great, the Python docs are really informative (if more than a little bit dense…I’m glad I have cheat sheets for syntax), and if those aren’t as helpful as you’d like, someone probably had your question on Stack Overflow already.&lt;/p&gt;

&lt;p&gt;I learned to just suck it up and read the docs ages ago, mostly when building circuits (the docs are the only way to learn how a chip works!), but I’m relearning the concept in full force at the moment. And hey, now I know how &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;except&lt;/code&gt; work. Thanks, docs!&lt;/p&gt;

&lt;h1 id=&quot;write-good-documentation&quot;&gt;Write Good Documentation&lt;/h1&gt;

&lt;p&gt;I knew this going in: I’ve edited plenty of programming books, and when I do code myself, I tend to comment things most of the time, especially when I’m learning a new language. But seriously, the only way you’re going to remember what your code does an hour from now when you come back to it (nevermind anyone else who needs to read it) is by commenting it up. To that end, I’m planning to make good use of docstrings.&lt;/p&gt;

&lt;h1 id=&quot;taking-care-of-yourself-is-key&quot;&gt;Taking Care of Yourself is Key&lt;/h1&gt;

&lt;p&gt;On Day 1, I didn’t eat properly, I didn’t get enough sleep, and I felt…well, not great, at the end of the day. If you’re going to survive a bootcamp, you have to take care of yourself. Take time for breakfast, don’t skimp on lunch (include protein!), drink plenty of water, and if you know you’ll go stir crazy, take a walk during lunch break. And if you need a moment of alone time during lunch, take it.&lt;/p&gt;

&lt;h1 id=&quot;you-dont-need-your-devices&quot;&gt;You Don’t Need Your Devices&lt;/h1&gt;

&lt;p&gt;Putting my phone on “Do Not Disturb” from 10 AM to 6 PM is kind of amazing. I recommend it to anyone who wants to have a less distracting, more productive day. The emails and social media notifications will still be there at the end of the day, I promise.&lt;/p&gt;

&lt;p&gt;Putting my laptop away for all of the daylight hours is pretty amazing, too. I thought I’d go crazy not being able to take notes on my computer, but honestly, I’m staying much more engaged than I could if I had my computer on. (Okay, friends, you can say “I told you so” now. You know who you are.)&lt;/p&gt;

&lt;p&gt;Anyway, that’s the end of tonight’s braindump. Time to get some sleep!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quote of the day: 
“And pair programming was hella chill.”
–From an in-class demo&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 06 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/hackbright/2016/07/06/Two-Days-In.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/hackbright/2016/07/06/Two-Days-In.html</guid>
        
        
        <category>Hackbright</category>
        
      </item>
    
      <item>
        <title>My First Post!</title>
        <description>&lt;p&gt;I’m testing out my new GitHub blog setup with Jekyll. Since I’m about to learn a ton of Python, let’s start with a little &lt;em&gt;Hello World&lt;/em&gt; program. It is tradition after all.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 22:06:54 -0700</pubDate>
        <link>http://jgriffith23.github.io/learning/2016/06/30/My-First-Post.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/learning/2016/06/30/My-First-Post.html</guid>
        
        
        <category>learning</category>
        
      </item>
    
  </channel>
</rss>
