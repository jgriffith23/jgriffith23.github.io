<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jennifer Griffith-Delgado</title>
    <description>Practicing, reflecting, and learning about software engineering, among other technical things.
</description>
    <link>http://jgriffith23.github.io/</link>
    <atom:link href="http://jgriffith23.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 12 Sep 2016 22:09:30 -0700</pubDate>
    <lastBuildDate>Mon, 12 Sep 2016 22:09:30 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Doodles About Lists in Memory</title>
        <description>&lt;p&gt;For months, I’ve been meaning to copy one of my earliest Hackbright lecture doodles
to my computer: a fun lil zine-ish comic about lists. Now that I have a bit more free time 
(and some inspiration courtesy of &lt;a href=&quot;https://twitter.com/sfzinefest&quot;&gt;SF Zine Fest&lt;/a&gt;),
I finally did the thing.&lt;/p&gt;

&lt;p&gt;When I learned about how lists work in memory in Python, my mind was blown. I’m used to
living in a land where saying something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = [1, 2, 3]
b = a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just means you have two copies of &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2, 3]&lt;/code&gt; in memory. But in Python, assigning one list to 
another binds two names to the same piece of memory. For instance, say Alice wants to 
represent her box of RPG campaign supplies as a list. Here’s the box:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/my_box.png&quot; alt=&quot;A box (list) of game stuff.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here’s Alice’s list.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencil&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;character sheet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;game rule book&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;robe&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;wizard hat&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alice is looking at her box, rather pleased with her packing job at this point, when 
her friend Barb comes over.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;can_we_share.png&quot; alt=&quot;Can we share?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Barb wants to share the box with Alice, so they only have to carry one box around.
Alice figures that’s cool, so she updates her Python code, too:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_box&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencil&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;character sheet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;game rule book&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;robe&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;wizard hat&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, Alice and Barb can refer to &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; when they talk about the container for
their game stuff. Sweet!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;still_mine.png&quot; alt=&quot;Still my_box, but okay.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But just because there’s another label on the box, that doesn’t
mean the old label went away. Just try asking the Python interpreter whether
the two boxes are the same item in memory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_box&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencil&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;character sheet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;game rule book&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;robe&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;wizard hat&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_box&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Python says &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;my_box&lt;/code&gt; are literally the same item.&lt;/p&gt;

&lt;p&gt;Now, Barb wants to spice up the campaign by adding Pokemon to the mix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pokeball.png&quot; alt=&quot;Let&#39;s add a Pokeball, ok?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alice isn’t sure how well that will go over, but she’s willing to go along with this idea.
She appends the new item to her Python list, too.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;pokeball&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, this item should be in the box…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;our_box.png&quot; alt=&quot;This box is my life now.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…and Alice’s list.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencil&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;character sheet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;game rule book&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;robe&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;wizard hat&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pokeball&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There it is! The shared box has Barb’s Pokemon stuff, and our heroines are ready to go
fight some dragons. Or capture Dragonairs. Maybe both.&lt;/p&gt;

&lt;p&gt;But remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;my_box&lt;/code&gt; are still looking at the same place in memory, just
like Alice and Barb are looking at the same box! The original binding never went away, 
meaning this picture is also correct:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;g4147.png&quot; alt=&quot;But this is also true.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After all, &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; is still Alice’s box. You can confirm this in the interpreter
as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_box&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencil&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;character sheet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;game rule book&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;robe&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;wizard hat&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pokeball&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_box&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s how Alice and Barb ended up playing a high-fantasy/Pokemon cross-over
pen-and-paper RPG campaign. Sharing memory, like sharing fun memories, is caring!&lt;/p&gt;

&lt;p&gt;(Yes, I hate myself a little for that last line.)&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Sep 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/doodles/2016/09/12/List-Doodles.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/doodles/2016/09/12/List-Doodles.html</guid>
        
        
        <category>doodles</category>
        
      </item>
    
      <item>
        <title>Crafter&#39;s Closet Version 0</title>
        <description>&lt;p&gt;My Hackbright project is done! Mind if I just gush for a minute?&lt;/p&gt;

&lt;h2 id=&quot;new-features-and-spiffiness&quot;&gt;New Features and Spiffiness&lt;/h2&gt;

&lt;p&gt;Last time I posted, I was halfway through the month-long process of building a
capstone project to demonstrate the skills I’ve learned at Hackbright. The next
couple of weeks were kind of a whirlwind of adding features, testing, and prettification.
Here’s where my little inventory tool landed in the end:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgriffith23/crafters-closet/raw/master/static/assets/Screenshots/Homepage.png&quot; alt=&quot;Landing Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgriffith23/crafters-closet/raw/master/static/assets/Screenshots/DashboardChart.png&quot; alt=&quot;Dashboard Top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgriffith23/crafters-closet/raw/master/static/assets/Screenshots/Inventory.png&quot; alt=&quot;Inventory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgriffith23/crafters-closet/raw/master/static/assets/Screenshots/Add-Supply.png&quot; alt=&quot;Adding a Supply&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m still using the same calming color palette that &lt;a href=&quot;https://github.com/paigebernier&quot;&gt;paigebernier&lt;/a&gt; and I discovered
during one of our early Hackbright labs, but there’s a bit more going on now than there was in the last Crafter’s
Closet post. For a look at the actual code, and the final tech stack, you can check out the project’s 
&lt;a href=&quot;https://github.com/jgriffith23/crafters-closet&quot;&gt;GitHub page&lt;/a&gt;, but I’ll talk a little about what’s new here.&lt;/p&gt;

&lt;h3 id=&quot;inventory-chart&quot;&gt;Inventory Chart&lt;/h3&gt;

&lt;p&gt;The dashboard now has a colorful doughnut chart, powered by &lt;a href=&quot;http://www.chartjs.org/&quot;&gt;Chart.js&lt;/a&gt;.
It’s meant to be a visual representation of how much of the space in your craft box each type of supply in
your inventory occupies. Admittedly, the actual calculation needs some work (a plan for v1.0), but the
idea is that 20 yards of yarn should get a bigger slice of the doughnut than 20 LEDs.&lt;/p&gt;

&lt;h3 id=&quot;updating-stock&quot;&gt;Updating Stock&lt;/h3&gt;

&lt;p&gt;Earlier screenshots of Crafter’s Closet showed a bunch of Update buttons on the inventory table. Until the
second sprint of my project, those buttons didn’t actually &lt;em&gt;do&lt;/em&gt; anything. Now, when you click one, a callback
function in an event listener attached to that button toggles a hidden text field into view. When you type
a number into that text box and click the Done button, the new stock value gets sent to the server via
an AJAX POST request, and that inventory item is updated in the database. (The inventory table does also get
updated.)&lt;/p&gt;

&lt;p&gt;You can also now use this feature to delete items from your inventory completely! All you’d have to do
is type 0 into the text box.&lt;/p&gt;

&lt;h3 id=&quot;autocompleting-fields&quot;&gt;Autocompleting Fields&lt;/h3&gt;

&lt;p&gt;Throughout this project, one of my goals was to keep the data in my database clean and streamlined. If I
ever deploy, I do want to allow users to add completely new supply details to my database, but where possible,
I want to do as much as I can to avoid misspelled duplicates.&lt;/p&gt;

&lt;p&gt;To that end, I added autocomplete functionality to the Color field when users add new supplies to their 
inventory. Selecting a supply type causes the Brands dropdown to populate with only brands associated with
that supply type. Once you choose a brand, the JQuery UI Autocomplete widget receives all colors associated 
with that brand in the database so that when you type, you’ll see existing colors that match your string.&lt;/p&gt;

&lt;p&gt;I also added autocomplete to the search box where you can filter your inventory. That field’s autocomplete
tags will only ever include strings that match items in your inventory.&lt;/p&gt;

&lt;h3 id=&quot;password-hashing&quot;&gt;Password Hashing&lt;/h3&gt;

&lt;p&gt;No user will ever see this feature in action, but it was still very important to me because if I ever deploy,
I want to try to be security conscious. Instead of storing passwords in plaintext in the database, I’m now
using Bcrypt to create hashes to store and check against.&lt;/p&gt;

&lt;h3 id=&quot;more-supply-data&quot;&gt;More Supply Data&lt;/h3&gt;

&lt;p&gt;This is another new bit that users can’t really see, but I had a lot of fun making it happen. Over time,
I want to keep adding new supplies to my database so users can document all the brands they add to their
inventory. For now, to beef up my dataset, I downloaded some product catalogs and took them apart.&lt;/p&gt;

&lt;p&gt;Yarn and paint catalogs tend to just have brands, colors, and pictures in them, so I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;pdftotext&lt;/code&gt;
command to extract just the text from some catalog PDFs. From there, I cracked the text files open in Vim 
and put some handy regexes to work to clean up superfluous text. Finally, I ran the text files through a 
Python script I wrote to generate a CSV that had all the information my &lt;em&gt;seed.py&lt;/em&gt; program needs to make
new database records.&lt;/p&gt;

&lt;p&gt;Massaging all that data into the exact format I wanted was surprisingly satisfying. I could easily see
myself spending an afternoon just fetching a bunch of data for funsies. Maybe after that, I can 
create an API for my app, so other people can get giant lists of craft supplies!&lt;/p&gt;

&lt;h3 id=&quot;pretty-stuff&quot;&gt;Pretty Stuff&lt;/h3&gt;

&lt;p&gt;I’m not fond of the prettification process, but I’m pretty pleased with how my project ended up
looking. I made the app generally more responsive (apparently just puting the body section in
a &lt;code class=&quot;highlighter-rouge&quot;&gt;container-fluid&lt;/code&gt; div makes everything stack nicely on shrinking if you’re using bootstrap),
added a spiffy background, picked some fonts, and applied my “brand” color (#80dfff) more
consistently.&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;Ultimately, I ended up with an app that works. It’s not perfect, but it does what I created it
to do. I feel pretty good about all that, but I did run into some challenges along the way.&lt;/p&gt;

&lt;h3 id=&quot;getting-comfortable-with-ajax&quot;&gt;Getting Comfortable with AJAX&lt;/h3&gt;

&lt;p&gt;I think my biggest challenge was getting along with JavaScript. I was really nervous about trying out JQuery 
and AJAX requests because I was more comfortable with Python, and the first place I took the plunge was 
with filtering my inventory table.&lt;/p&gt;

&lt;p&gt;Major shoutout to Tim, one of my three amazing mentors, for helping me plan the whole thing out. 
I’ve never been so glad I forced myself to take over whiteboarding the solution to a problem! I had
the “aha” moment I’d been waiting for, and I’ve felt a lot more comfortable making AJAX requests
since. In fact, I daresay I enjoy it.&lt;/p&gt;

&lt;p&gt;We discussed which piece of my page would make the most sense to break into its own template, 
walked through the JQuery code and AJAX calls I’d need to make to get the new table data, and planned 
which Flask routes I’d need to add to get the data from the database. By having someone else ask me 
questions about my app’s architecture, I developed a better understanding of it myself. From there, 
it was just a matter of coding carefully and making the right database queries.&lt;/p&gt;

&lt;p&gt;I developed a little system for myself for writing AJAX requests for data:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write an event listener and handler for the element that the user should click to start this process. Have the event handler print something amusing to the browser console, so you know you got inside the function. (And to make yourself laugh. Just delete the debug code when you’re done.)&lt;/li&gt;
  &lt;li&gt;Write a Flask route that returns the arguments it got from JavaScript. Print that to the browser console, too. (This step is where I learned that I needed to URL-encode my search parameters so spaces, ampersands, and so on, would make it through to the server intact.)&lt;/li&gt;
  &lt;li&gt;Write any Python code needed to get the actual data out. Return that data to JavaScript from the Flask route. Plop it straight where you want the updated HTML to go.&lt;/li&gt;
  &lt;li&gt;When you can see your data reach the front end, you’re ready to actually make HTML, whether the server crafts and passes that HTML forward or JavaScript handles placing it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My server renders new HTML for the inventory table and sends it to the front end because that was the 
easiest way for me to get my head around the process at first. In v1.0, I want to try passing a JSON object forward instead, 
so I can let JavaScript handle placement.&lt;/p&gt;

&lt;h3 id=&quot;knowing-when-to-pivot-to-different-technology&quot;&gt;Knowing When to Pivot to Different Technology&lt;/h3&gt;

&lt;p&gt;The autocomplete feature took me a couple of days, which was a solid day and a half longer than I was expecting
to spend on it. The main reason for the delay was stubborn determination to get the &lt;a href=&quot;https://twitter.github.io/typeahead.js/examples/&quot;&gt;Typeahead&lt;/a&gt; 
library working.&lt;/p&gt;

&lt;p&gt;At first, I couldn’t get my autocomplete tags to populate at all without hard-coding a list into the
JavaScript code for the feature. Turns out Typeahead actually caches your tags, so if the list isn’t
there when the code runs, the list gets cached as empty.&lt;/p&gt;

&lt;p&gt;I managed to turn off caching, and I started prefetching and processing a list
of tags from the server. That let me at least populate the list once without hard coding it, but unfortunately,
I couldn’t seem to get my tag fetching code to work inside a callback function.&lt;/p&gt;

&lt;p&gt;After beating my head against this problem for a day, I nearly gave up on autocomplete. Before giving up, however,
I decided to give JQuery UI’s autocomplete widget a shot. After discovering a rogue extra JQuery import statement
in my HTML templates (apparently I was overwriting the JQuery UI code with that second import), the widget worked 
brilliantly, and I got the feature up and running quickly.&lt;/p&gt;

&lt;p&gt;I haven’t had a good chance to try Typeahead again since deleting the extra import statement, but in the coming weeks,
I want to check whether the problem was purely ebkac or not. My research indicates the library just doesn’t support
events, but we’ll see.&lt;/p&gt;

&lt;p&gt;In any case, I did learn that if you’re beating your head against a wall, pivoting to something new
can help you break through that blocker.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Eventually, I plan to deploy Crafter’s Closet to the Web (many of the folks in my class want to try
deploying, I think). But first, I have a few more goals to achieve, along with the refactors I mentioned above.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add more form validation.&lt;/li&gt;
  &lt;li&gt;Add more craft supplies to the database!&lt;/li&gt;
  &lt;li&gt;Implement a feature for photo uploads.&lt;/li&gt;
  &lt;li&gt;Allow users to write longer project descriptions.&lt;/li&gt;
  &lt;li&gt;Allow users to update project pages, including the supplies required.&lt;/li&gt;
  &lt;li&gt;Add public-facing user profile pages.&lt;/li&gt;
  &lt;li&gt;Implement a “favorite” feature, so users can bookmark projects&lt;/li&gt;
  &lt;li&gt;Implement a feature where users can mark projects as completed and their inventory updates accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these might be v2.0 ideas, but I do plan to keep adding to this project over time. I’d also
like to run some pentesting tools like Burp on my app to see where the glaring holes that
I know must exist are hanging out and try to patch as many as I can.&lt;/p&gt;

&lt;p&gt;First, though, I think I need a few days to rest. Hackbright is amazing, but it’s also exhausting!&lt;/p&gt;

</description>
        <pubDate>Mon, 12 Sep 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/hackbright/2016/09/12/CraftersCloset-Reflections.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/hackbright/2016/09/12/CraftersCloset-Reflections.html</guid>
        
        
        <category>hackbright</category>
        
      </item>
    
      <item>
        <title>Halfway Through My First Project Sprint</title>
        <description>&lt;p&gt;At Hackbright, we’re halfway through our first sprint of project time. We’ve all spent the last two weeks working like crazy to get a minimum viable project off the ground, and as part of our homework this past weekend, we were asked to take some time to reflect.&lt;/p&gt;

&lt;p&gt;Several of the reflection prompts we received to write on were very much in line with thoughts I wanted to blog about here anyway, so I figured I’d just share some of those now.&lt;/p&gt;

&lt;h1 id=&quot;what-inspired-you-to-do-this-project&quot;&gt;What inspired you to do this project?&lt;/h1&gt;

&lt;p&gt;I’m building a personal craft supply inventory tool, where users can log their supplies, monitor their inventory, and see how many supplies they need to build a project. I was inspired to build this app after asking myself two questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What problems do I have on a regular basis that I could solve by writing a program?&lt;/li&gt;
  &lt;li&gt;Is there a program out there that solves a similar problem that I could look to as a model?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I love arts and crafts, so my answer to Question 1 came pretty quickly. I have a giant box and a big old shelf of craft supplies that are semi-organized, but I honestly have no idea what supplies I actually own. I’d love to be able to just go through them once, catalog them, and create an inventory.&lt;/p&gt;

&lt;p&gt;I also tend to just rebuy craft supplies when I want to do a new project, only to discover later that I didn’t need to buy them at all. If I had a program that could look at my inventory and tell me how many supplies I need to build something, I could avoid that issue.&lt;/p&gt;

&lt;p&gt;Once I knew I wanted to build a personal supply inventory, I realized I already use a personal inventory tool called Deckbox to catalog a very different hobby item–my Magic cards. Deckbox has a lot of features similar to what I wanted for my craft inventory, so I got a lot of inspiration from there. The ability to search and filter your inventory on multiple columns is very much inspired by Deckbox.&lt;/p&gt;

&lt;h1 id=&quot;what-part-of-the-technology-interested-you&quot;&gt;What part of the technology interested you?&lt;/h1&gt;

&lt;p&gt;From the start, I wanted to create an application where most of the business logic happens on the server and the front end mostly has to worry about submitting data, asking for data, and displaying it, not making big decisions. I really like Python, so I wanted to write a lot of it.&lt;/p&gt;

&lt;p&gt;The first time we touched databases at Hackbright, I knew my app was going to revolve around them, too. Databases are fascinating! I was very interested in creating a data model (I’m very proud of mine), designing my system, and being able to display my data in a variety of ways.&lt;/p&gt;

&lt;p&gt;I also wanted to get out of my comfort zone and make sure some of my features relied on JavaScript. We didn’t get as much time with JavaScript in the regular curriculum, but I wanted some features (like inventory filtering) to be able to change the page appearance without reloading the entire page. As such, I made sure to try using jQuery and AJAX, and I’m glad I did! I think JavaScript and I have reached a truce.&lt;/p&gt;

&lt;h1 id=&quot;what-are-the-different-elements-of-your-project-and-how-did-you-structure-your-project&quot;&gt;What are the different elements of your project, and how did you structure your project?&lt;/h1&gt;

&lt;p&gt;My project revolves around tracking two types of information:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The supplies a user owns&lt;/li&gt;
  &lt;li&gt;The supplies needed for a project a user wants to build&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My ultimate goal for the first sprint was to be able to tell a user exactly what supplies they own and how many supplies they would need to buy to build a project in the app’s database. (Of course, that relies on the user giving accurate data; how well a user wants to keep their inventory up-to-date isn’t for me or my app to decide, however.)&lt;/p&gt;

&lt;p&gt;To that end, here’s how I’ve structured my project so far, in terms of data and page connections.&lt;/p&gt;

&lt;h2 id=&quot;the-data-model&quot;&gt;The Data Model&lt;/h2&gt;

&lt;p&gt;My database has five tables, which work together to represent all supplies my app’s users own, all supplies in projects my users want to build, and the details about those supplies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgriffith23/jgriffith23.github.io/blob/master/assets/CC-early-screens/CraftersClosetDataModel.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This data model shows the following relationships:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A user can have many projects, but each project is owned by only one user.&lt;/li&gt;
  &lt;li&gt;A user can have many items in their inventory, and each item has a particular set of details attached to it.&lt;/li&gt;
  &lt;li&gt;The set of details that embodies a particular supply can apply to many items owned by users.&lt;/li&gt;
  &lt;li&gt;A project can have many supplies associated with it.&lt;/li&gt;
  &lt;li&gt;The set of details that embodies a particular supply can apply to many supplies required by projects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Determining exactly what the relationships between users, projects, and inventories should be was a really fun and interesting problem to solve. Thanks to some top-notch advising (Lavinia, you’re the best!), I realized that it would make sense to separate the “idea” of a supply from the information specific to users and projects. From there, we determined that projects and supplies actually have a similar relationship to the one between users and supplies.&lt;/p&gt;

&lt;h2 id=&quot;site-pages-and-connections&quot;&gt;Site Pages and Connections&lt;/h2&gt;
&lt;p&gt;When a user first arrives at my homepage, they see a landing page where they can search for projects other users have created, register, or authenticate. On registration, a user is authenticated automatically.&lt;/p&gt;

&lt;p&gt;I’ll take you on a little tour of the application so far, but try to ignore the actual data. Some of it is…creative. I blame the debugging process.&lt;/p&gt;

&lt;h3 id=&quot;the-dashboard&quot;&gt;The Dashboard&lt;/h3&gt;
&lt;p&gt;On authentication, a user is taken to the dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgriffith23/jgriffith23.github.io/blob/master/assets/CC-early-screens/Dashboard.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the dashboard, a user can filter their inventory view…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/CC-early-screens/InventoryFilter.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or search their inventory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgriffith23/jgriffith23.github.io/blob/master/assets/CC-early-screens/SearchInventory.PNG?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Users can also add supplies to their inventory from their dashboard by clicking “Add a Supply!” and submitting the form in the modal window that appears on click.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/CC-early-screens/AddSupply.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the full dashboard screenshot below shows, users can also view a list of their projects from the dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/CC-early-screens/FullDashboard.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;project-pages&quot;&gt;Project Pages&lt;/h3&gt;

&lt;p&gt;From the dashboard, a user can choose to create a new project. Clicking “Create a New Project” takes the user to a new page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/CC-early-screens/ProjectCreationPage.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This page lets users give a title, description, and a link to a tutorial. The “Add a Supply to This Project” button generates a form with the same fields as the “Add Supply” form when pressed. A user just has to enter the supply details in the forms they generate to specify the supplies associated with the project.&lt;/p&gt;

&lt;p&gt;Once a user presses “Create Project,” the project is added to the database and the user is taken to the project’s landing page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/CC-early-screens/NewProjectPage.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Project pages tell authenticated users how much of a required supply they need to buy to make a project. In this example, the authenticated user (not necessarily jhacks, the demo project creator) doesn’t own either of the supplies required for this project, so they have to buy the full amount.&lt;/p&gt;

&lt;h3 id=&quot;okay-so-wheres-the-javascript&quot;&gt;Okay, so where’s the JavaScript?&lt;/h3&gt;

&lt;p&gt;In terms of fetching and processing data for all these pages, Python does the heavy lifting. But JavaScript was key to getting the project search, inventory search, and inventory filter features working according to my vision. I wanted to only change those tables when the user requested a new view, rather than rerender the whole page. That process looks something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AJAX sends a request to the server containing the search/filter parameters.&lt;/li&gt;
  &lt;li&gt;The appropriate Flask route calls a helper function to fetch the appropriate data and process it accordingly.&lt;/li&gt;
  &lt;li&gt;Flask renders the HTML to be replaced.&lt;/li&gt;
  &lt;li&gt;Flask passes the HTML back to JavaScript, via AJAX.&lt;/li&gt;
  &lt;li&gt;JavaScript plops the new HTML onto the page in a conveniently placed &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perhaps in my second sprint, I’ll try letting JavaScript do more work, but for now these features are functional. If it ain’t broke…&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h1&gt;
&lt;p&gt;That’s my app so far! It’s still rough around the edges, but it’s mine, and I’m enjoying the work. I’ll have a couple more blog posts coming up where I discuss challenges and look ahead to the rest of our second sprint.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/hackbright/2016/08/22/End-Of-First-Sprint.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/hackbright/2016/08/22/End-Of-First-Sprint.html</guid>
        
        
        <category>hackbright</category>
        
      </item>
    
      <item>
        <title>Coding Bootcamp (Or, How I Learned to Stop Worrying and Love Failure)</title>
        <description>&lt;p&gt;Failure is frustrating and often feels unfair, but it’s also one of the most effective 
teachers I’ve ever had, both in life and in programming.&lt;/p&gt;

&lt;p&gt;“Fail fast” is a common saying in tech for good reason. I can write working code 
all day and have to look up the same patterns later, but throw a bug in my path, 
and I’ll remember how to avoid it next time. My pair programming partners 
and I have had some pretty good “failures” that taught me some important questions to 
ask myself whenever a program goes sideways.&lt;/p&gt;

&lt;h1 id=&quot;is-that-thing-really-what-you-think-it-is&quot;&gt;Is That Thing &lt;em&gt;Really&lt;/em&gt; What You Think It Is?&lt;/h1&gt;

&lt;p&gt;An application I was working on last week could fetch multiple rows of data from a database and store
those rows as a list of tuples. In an effort to automate some Jinja templating and display
that data, my pair programming partner and I did something like the loop in the code below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;em&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;double-u&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;eff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;omgwtfbbq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;omgwtfbbq&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;oh&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;em&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;gee&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;double-u&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;tee&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;eff&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;bee&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;bee&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;cue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nym&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;omgwtfbbq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ro&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nym&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;oh&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gee&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tee&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bee&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bee&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cue&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code creates tuples representing some phonetic-ish spellings 
for three acronyms and plops them into a list. Each iteration of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop grabs the next tuple, unpacks it into three variables, and prints the
value of each variable to say something incoherent.&lt;/p&gt;

&lt;p&gt;Our loop did the job so well and with so few lines of code that the next time we 
needed to display a row of data from the database, we knew exactly what to do. Just
unpack it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop!&lt;/p&gt;

&lt;p&gt;Well, that didn’t work. We scoured our code, Googled all the (relevant) things, 
and checked our routes. We tested our process in the console. There were no typos, 
unpacking worked the way we thought, and we could access all of our pages just fine.&lt;/p&gt;

&lt;p&gt;Turns out we had a big case of “that thing is not what you think it is.” The 
application we were modifying actually gave us single rows from the database as
single tuples, &lt;em&gt;not&lt;/em&gt; lists of tuples. Oops.&lt;/p&gt;

&lt;p&gt;This is roughly what was happening:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;is a tuple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;pyshell#7&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;too&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember how strings are lists? Well, this &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop tries to unpack every string 
as its component characters. Because y’know, the strings are lists. It’s trying to
do exactly what the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop did, but there just aren’t enough variables
for it to unpack all those characters into.&lt;/p&gt;

&lt;p&gt;We figured this out by talking our problem through with one of our amazing instructors 
and by printing the output from both data fetching operations to the screen. Once we
knew what we were actually working with, getting the data to display without errors was easy.&lt;/p&gt;

&lt;p&gt;And now I’ll never forget how unpacking works–or perhaps more importantly, I’ll never
forget to actually confirm my data types.&lt;/p&gt;

&lt;p&gt;Probably. Most of the time.&lt;/p&gt;

&lt;p&gt;In a sentence: Before you begin coding, be aware of the nature of your data.&lt;/p&gt;

&lt;h1 id=&quot;are-you-going-where-you-think-youre-going&quot;&gt;Are You Going Where You Think You’re Going?&lt;/h1&gt;

&lt;p&gt;The best-planned program’s execution path can be totally different from
what you intended it to be if there’s a bug in your code. How perfect
your loop or if statement is doesn’t matter if execution never lands inside that
block.&lt;/p&gt;

&lt;p&gt;I’ve run into this issue enough now that sometimes even before a program starts
misbehaving, I’ll throw down a print statement inside a loop just to have the 
console tell me “Hey, I’m inside that awesome for loop!” (Don’t judge. Complimenting
your own code might just brighten your day, too.)&lt;/p&gt;

&lt;p&gt;Printing debug statements has been especially handy now that we’re using JavaScript, 
because JavaScript code seems to involve a lot of callbacks. A &lt;em&gt;callback function&lt;/em&gt;,
also called an &lt;em&gt;event handler&lt;/em&gt;, is a function that gets executed in response to an event.
In the browser, those events include clicks, key presses, and so on. You can add
an &lt;em&gt;event listener&lt;/em&gt; to an HTML element (like a button), and the event listener 
actually tells JavaScript which callback to run when an event happens to the element.&lt;/p&gt;

&lt;p&gt;The whole system of events, event listeners, and callbacks is fun to play with (it’s
like using interrupts in hardware land &amp;lt;3), but it can be frustrating too. If you
click a button you’ve placed an event listener on and nothing happens, maybe there’s
an error in your callback–but maybe you’re never actually reaching the callback
in the first place.&lt;/p&gt;

&lt;p&gt;I’ve found the latter to be my issue often enough that every time I write a callback now,
I plan to include a &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; statement until the code is finalized so I have
some indication that the callback even happened.&lt;/p&gt;

&lt;p&gt;In a more literal situation, last week also reminded me yet again to make doubly sure
that my route names in my HTML files actually match the route names in my server
application correctly. If you have a link in HTML that tries to send a user to a
route that doesn’t exist, you’ll never be able to reach that route!&lt;/p&gt;

&lt;p&gt;Interestingly, typos are worse to me when I’m programming than they are when I’m 
editing. At least typos that get past developmental edits should get caught by a copyeditor or proofreader; in code, unless you’re pair programming, there’s no one to check your 
work but you. And a typo won’t break a book.&lt;/p&gt;

&lt;h1 id=&quot;are-you-working-in-the-environment-you-think-you-are&quot;&gt;Are You Working in the Environment You Think You Are?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Related question: Are you actually importing the modules you think you’re
importing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If the first rule of tech support is “check whether the machine is plugged in,” 
then this question definitely belongs in every debugging checklist.&lt;/p&gt;

&lt;p&gt;In Python, it’s really helpful to create a virtual environment for a project 
you’re working on, so you can export the package requirements for easy installation 
with &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; later. Just remember to activate your environment next time you work on 
the project, or you might not have the right version of, well, anything.&lt;/p&gt;

&lt;p&gt;When you install packages from another person’s requirements file, if the project
doesn’t run out the gate, don’t panic. Check that requirements file, and make sure
all the modules your code relies on are actually listed there. If a module is 
missing, then install it manually and recreate the requirements file.&lt;/p&gt;

&lt;p&gt;Having the right modules isn’t the only potential source of error in this 
category, though. It’s also entirely possible to work away on a file and not
find out you’ve been tweaking the wrong file until you try to run your upgrades
and nothing’s different.&lt;/p&gt;

&lt;p&gt;Programs with tab functionality rock. Browser tabs, text editor tabs, terminal
tabs–they’re great. Just one small drawback: when you get too many tabs open,
the titles shrink. When you’re editing documents, that might mean you can’t read
the filename anymore. (At that point, maybe you’ve gone overboard with the tabs, 
but that’s a separate issue…)&lt;/p&gt;

&lt;p&gt;That’s not a big deal if you’re editing files that look completely different. But 
if for some reason you have, say, two different CSS stylesheets open that have very
similar information in them, then mixing them up is entirely too easy. And yes, 
I know this from experience. I’m not even embarrassed: I learned a valuable
lesson!&lt;/p&gt;

&lt;h1 id=&quot;are-you-missing-a-syntax-element&quot;&gt;Are You Missing a [Syntax Element]?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Related question: Do you have a [syntax element] that doesn’t belong?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I started learning Python, I wanted to treat &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; like a function and use
parentheses. We’re learning Python 2; apparently, I was just anticipating Python 3. I also 
had to break myself from using semicolons everywhere and teach myself to use indentation
instead of curly braces to indicate block scope.&lt;/p&gt;

&lt;p&gt;Then, Hackbright sent us to JavaScript Land, where I had to unlearn everything I
overwrote in my muscle memory. Now, I keep trying to end statements with semicolons
in Python and use colons after &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements and the openings of &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops in
JavaScript.&lt;/p&gt;

&lt;p&gt;Mixing up syntax on occasion is just a consequence of knowing multiple languages,
and I’ll happily accept it. Hooray for error messages!&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h1&gt;

&lt;p&gt;Confession time–&lt;/p&gt;

&lt;p&gt;The title of this post is more aspirational than truthful. I definitely still
worry about failing, but Hackbright is doing an amazing job of convincing me
that failing is perfectly acceptable, even encouraged (to an extent, anyway; in a job,
your code &lt;em&gt;will&lt;/em&gt; have to work eventually, according to someone else’s timeline). 
Everyone here is so supportive and smart, and no one looks down on you for having a bug, 
even if it’s silly. If anything, one of the staff will say, “Oh, let me tell you about 
a time I had the same bug!”&lt;/p&gt;

&lt;p&gt;Either way, the staff are all brilliant at guiding you to solving problems 
yourself, rather than just solving them for you and leaving you mystified. 
That’s one of the best things about Hackbright–they teach us to think
through problems, not just memorize everything. The solution may not always be 
the same, but you can apply a good process for problem solving to just about any
bug you encounter.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Relevant Quotes:&lt;/p&gt;

  &lt;p&gt;“Make sure you’re actually getting to the place you think you’re getting to!”
–Meggie&lt;/p&gt;

  &lt;p&gt;“The first solution isn’t always the best, but if it works, try it.
 Then refactor your code.”
–A fellow Hackbrighter whose name I didn’t write down… &amp;gt;.&amp;lt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 01 Aug 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/programming/2016/08/01/Love-Failure.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/programming/2016/08/01/Love-Failure.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Templating and Interfacing Web Pages is Awesome</title>
        <description>&lt;p&gt;After a whirlwind week of HTML, CSS, and Flask, I know roughly how to make web pages talk to each other. Woohoo! Definitely still have a lot to learn, though. I also hit some areas of programming that I just don’t grok intuitively, and grappling with them has been…interesting.&lt;/p&gt;

&lt;p&gt;I’m a logical person. I like simplifying logic equations with De Morgan’s theorem and then building little systems to represent them with logic gates. I used to do those gridded logic puzzles on paper for fun, and I’m one of those weirdos who gets excited about stepping through programs with debuggers.&lt;/p&gt;

&lt;p&gt;But I’m also a creative person. I love writing, doodling, cross-stitching, watercolor painting, photography, and costuming. One of my favorite programming tools is Processing because I can use it to code art. I’ll take any excuse to combine crafting with LEDs, and I once made a color-changing scarf.&lt;/p&gt;

&lt;p&gt;So, I thought I’d fall madly in love with front-end development for some reason. It’s artistic and logical, right?&lt;/p&gt;

&lt;p&gt;Apparently I’m not as wired for design as I thought I might be, or maybe web design, in particular, isn’t the right kind of logical for me. While I can envision a pipeline of information going from one program to another to put words on a screen, I often cannot picture exactly how something I do in HTML or CSS will affect what those words look like. Sure, there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; that this text is theoretically going to sit in, but don’t ask me where that &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; sits on the page.&lt;/p&gt;

&lt;p&gt;Maybe it’s a matter of practice? Once I get into a good workflow and get a skeletal page put together, making the page pretty gets easier, but it just doesn’t flow yet. I’ll have to keep trying. Perhaps I’ll fiddle with my Liquid templates.&lt;/p&gt;

&lt;p&gt;Meanwhile, there are several areas of web development that I’m much more excited about.&lt;/p&gt;

&lt;h1 id=&quot;interfacing-components&quot;&gt;Interfacing Components&lt;/h1&gt;

&lt;p&gt;Things got real at Hackbright when we started tinkering with a web framework called Flask. With Flask, you can use Python to make web pages talk to each other, and that feels amazing. For part of our homework this weekend, we built the bare beginnings of a simple web application, complete with form fields.&lt;/p&gt;

&lt;p&gt;Here’s what a route to an HTML page on a website might look like in Flask:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Shows an index page.&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first line is called a &lt;em&gt;decorator&lt;/em&gt;, which defines a route; in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; is the route being defined. The decorator syntax is a really cool part of Python; if I’ve understood correctly, a decorator is actually sort of wrapper that changes the behavior of another function without modifying the function itself, which allows you to generate new functions. (Yo dawg, I heard you like functions…) The function after the decorator defines what should happen when someone accesses that route, say by clicking a hyperlink or submitting a form. Anyone accessing &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; will be served the page written in &lt;em&gt;index.html&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I find thinking about how best to link up pages on a website really fascinating, and debugging the connections can be a great puzzle to work through. (Debugging routes can also be frustrating–very frustrating. Working with Flask has reminded me of the value in just walking away for a little while.)&lt;/p&gt;

&lt;h1 id=&quot;templating-all-the-things&quot;&gt;Templating All the Things&lt;/h1&gt;

&lt;p&gt;We’ve also been learning how to generate HTML pages with Jinja, a Python templating engine that you can interface with Flask. The idea is that you can create a base template (or multiple bases, if you like) with placeholders that Jinja understands, and other pages on your site can inherit the characteristics of the base template. Then, when you render pages in Flask, Jinja will fill in the blanks! Plus, if you link up your CSS stylesheet inside your base template, the styles will be automatically applied to all pages that inherit from the base. SO. COOL.&lt;/p&gt;

&lt;p&gt;A simple &lt;em&gt;base.html&lt;/em&gt; file might look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/jinja_base.PNG&quot; alt=&quot;Jinja&quot; title=&quot;Jinja-fied Base Template&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Liquid really wanted to read these Jinja blocks so I had to screenshot the code. If you like the colors I have going on here, check out the &lt;a href=&quot;https://sailorhg.github.io/fairyfloss/&quot;&gt;Fairyfloss Sublime Text theme&lt;/a&gt; by the amazing &lt;a href=&quot;https://twitter.com/sailorhg&quot;&gt;@sailorhg&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;The blocks do what they say on the tin. the &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; block is a placeholder for the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section of an HTML page, the &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; block is a placeholder for any &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; you might want to fill in, and so on. Jinja can also handle loops and if statements, and this code uses both to display any flash messages generated by the page previously visited.&lt;/p&gt;

&lt;p&gt;With this base file, you could make an HTML file like this one that extends it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/jinja_extend.png&quot; alt=&quot;Jinja&quot; title=&quot;Jinja-fied HTML Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Isn’t that lovely? It’s so much cleaner than cluttering your files with all the usual HTML tags, and it’s way more readable. Being able to supply content for those variables also lets you do really fun things, like templatizing (is that a word?) bulleted lists or tables as shown above. Just create a list of data in your Flask script, pass the list to Jinja when you render the template, and boom, you can throw down a ten-line table in half the HTML. Plus, you’ll never have to worry about adding extra lines manually.&lt;/p&gt;

&lt;p&gt;Automation == &amp;lt;3&lt;/p&gt;

&lt;h1 id=&quot;testing-debugging-and-documenting&quot;&gt;Testing, Debugging, and Documenting&lt;/h1&gt;

&lt;p&gt;I know, I know, I’ve said it before. I’m into documentation, and testing with docstrings is awesome. We also learned about unit, integration, and functional testing in Python this week, though, and I just have to say, I’m looking forward to writing tests for my big project once I get started. I’m still not sure how I feel about the idea of test-driven development (I’ll have to try it at some point), but I see merit and sense in knowing how to write good tests. I’ll have to start using &lt;code class=&quot;highlighter-rouge&quot;&gt;unittest&lt;/code&gt; on my homework or maybe cook up a personal project to get some experience.&lt;/p&gt;

&lt;p&gt;Debugging Jinja/Flask code is a new and interesting experience, too, because you’re dealing with sets of data in a different formats. You have to make sure you’re passing Jinja data in a form it can use, so print statements are often extra helpful in Flask code. Just print data as you process it, and you’ll be able to track the variables you’re trying to pass to Jinja much more easily.&lt;/p&gt;

&lt;p&gt;Flask’s debug toolbar is also quite helpful, and the Inspect tool in browser developer toolkits is all kinds of awesome. Yay, tools!&lt;/p&gt;

&lt;h1 id=&quot;knowing-how-and-why-systems-work&quot;&gt;Knowing How and Why Systems Work&lt;/h1&gt;

&lt;p&gt;Ultimately, what I realized while I was thinking about everything I enjoyed about this week is that my favorite part of computer engineering is still knowing the how and the why of a system I’m creating or maintaining. I need to know why a system should work the way it does to begin to understand it. I like to know how pages communicate, and there’s no better way to know that than by routing the connections yourself. It’s also very satisfying to look at a block of text on a page and know exactly how certain pieces of it got from the user’s input to being displayed in the browser. One of our assignments this week taught us roughly how a shopping cart might work, using sessions, and it totally blew my mind.&lt;/p&gt;

&lt;p&gt;I don’t need to be the one making pages pretty, though. Give me your gorgeous pages, tell me what data you want to display on them, and I’ll be happy to (try to) make them into a running web application.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quotes of the Post:&lt;/p&gt;

  &lt;p&gt;(On programming, generally):
“When you want to write a program, the last thing you should do is touch your keyboard. Plan first.”&lt;/p&gt;

  &lt;p&gt;(On Flask/Jinja):
“Try to think backward from what your template needs.”&lt;/p&gt;

  &lt;p&gt;–Ahmad&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 24 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/programming/2016/07/24/Templating-and-Interfacing-Web-Pages.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/programming/2016/07/24/Templating-and-Interfacing-Web-Pages.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Doodles for Comprehension</title>
        <description>&lt;p&gt;I can’t listen to lectures (or meetings, for that matter) without doodling if there’s a pen and paper in front of me. Writing things down is really helpful, though, and whenever I make a good doodle that embodies a new concept, I definitely remember it more effectively.&lt;/p&gt;

&lt;p&gt;Some folks thought these were cute, so I figured I’d share, in case anyone else would find them useful. (Concepts appear in no particular order.)&lt;/p&gt;

&lt;h1 id=&quot;methods-vs-functions&quot;&gt;Methods vs Functions&lt;/h1&gt;

&lt;p&gt;We had our first few lectures on object-oriented programming. Talking about the differences between functions and methods inspired this little doodle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/ListMethodsFunctions.png&quot; alt=&quot;Methods and Functions&quot; title=&quot;Methods and Functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case the little characters didn’t get the point across, one way to remember when you’re using a method and when you’re using a function is if you can ask the object to do something to itself. In that case, you’re dealing with a method. If you’re asking Python to do something and passing the object as a parameter, you’re using a function.&lt;/p&gt;

&lt;h1 id=&quot;python-is-loosely-typed&quot;&gt;Python is Loosely Typed&lt;/h1&gt;

&lt;p&gt;Coming from C-landia, this was one of the strangest things for me to grok about languages like Python. If I don’t tell you what my variable is, how will you know how much space to reserve? And why would I even want to change the type of my variable’s contents midway through a program? Ahhh!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/LooseTypes.png&quot; alt=&quot;Loosely Typed&quot; title=&quot;Loosely Typed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But everything seems to work out in the end. I can see now that it is possible to not know whether the user will give you a string or a number and not end up with a program that breaks–you just have to handle the input appropriately. I’ve also just come to accept and enjoy the fact that I don’t have to program in quite so rigid a structure as I used to.&lt;/p&gt;

&lt;h1 id=&quot;for-good-style-and-sanity-dont-mix-tabs-and-spaces&quot;&gt;For Good Style and Sanity, Don’t Mix Tabs and Spaces&lt;/h1&gt;

&lt;p&gt;In Python, indentation matters. It’s the only way your code blocks get set apart from each other. Apparently, it’s typical for Python programs to use four spaces as the standard indent amount, rather than using a single tab. But whatever your code base uses, just don’t mix the two, or you’ll cause headaches for everyone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/tabs.png&quot; alt=&quot;Tabs and Spaces&quot; title=&quot;Tabs and Spaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing should actually explode, but people may get upset with you if their program goes sideways due to indentation errors because you started using tabs instead of spaces.&lt;/p&gt;

&lt;h1 id=&quot;dont-freak-out--try-it-out&quot;&gt;Don’t Freak Out–Try It Out!&lt;/h1&gt;

&lt;p&gt;One of my favorite aspects of Python is the fact that you can just try something out when you’re not sure what it does. Confused about a method? Got a file full of classes and just want to play with them? Crack open that Python console and go to town.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/pythonspace.png&quot; alt=&quot;Python SPACE!!&quot; title=&quot;Now entering the Python space...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve really enjoyed using &lt;code class=&quot;highlighter-rouge&quot;&gt;bpython&lt;/code&gt; instead of the standard &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; program lately. It has tab completion and syntax highlighting!&lt;/p&gt;

&lt;h1 id=&quot;still-stuck&quot;&gt;Still Stuck?&lt;/h1&gt;

&lt;p&gt;Finally, one of my personal favorites–if you’re still stuck after playing around in the console…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jgriffith23/jgriffith23.github.io/master/assets/readthedocs.png&quot; alt=&quot;Read the Docs&quot; title=&quot;Read the Docs!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because dense as they are, they’re at least a good pivot for asking questions intelligently elsewhere, or finding a good tutorial on a particular use for a method, function, class, and so on.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/python/2016/07/17/Doodling-for-Comprehension.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/python/2016/07/17/Doodling-for-Comprehension.html</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>On Explaining Well</title>
        <description>&lt;p&gt;Over the last several days, I’ve been learning about and reaping the benefits of improving my ability to tell people just what the heck I mean.&lt;/p&gt;

&lt;p&gt;Even if you’re never going to talk to a customer or a non-technical co-worker about something in your company’s code base, you’re still going to have to explain your work to &lt;em&gt;someone&lt;/em&gt;. That might be another member of your engineering team, someone using your program who you’ll never even meet, or yourself a few days later. Whoever that person is, they’ll thank you for communicating your intentions clearly.&lt;/p&gt;

&lt;p&gt;So far, I’d put the experiences I’ve had with explaining code into four categories. One involves speaking out loud, and the others involve documenting something about code in writing. Each category I mention here also relates to a slightly different audience.&lt;/p&gt;

&lt;h1 id=&quot;describing-code-aloud&quot;&gt;Describing Code Aloud&lt;/h1&gt;

&lt;p&gt;In pair programming, the idea is that you’re constantly discussing what’s going on in your program out loud. Since you frequently switch who’s driving and who’s navigating, talking through each line together as you program is the best way to make sure both you and your partner know what everything does. Maybe you know exactly how a method you want to use works, but if your partner doesn’t understand it they’ll get confused. Simply describing that method to your partner can help you both think about the program more effectively.&lt;/p&gt;

&lt;p&gt;This vocal discussion can (often should) begin even before you start actually coding up a solution to a problem. Grab a pen and paper, and just write a plan in pseudocode. You might have one algorithm in mind while your partner sees the problem differently, and by talking about your ideas, you can find the best solution.&lt;/p&gt;

&lt;p&gt;Collaborators you see in person need to know what the program they’re helping to create does, but sometimes, programmers and other users you don’t interact with will need that information, too. You could keep all the details in your head and just Skype with the other person to get them up to speed, but documenting your code as you write it is much more efficient.&lt;/p&gt;

&lt;h1 id=&quot;writing-useful-docstrings-3&quot;&gt;Writing Useful Docstrings (&amp;lt;3)&lt;/h1&gt;

&lt;p&gt;I knew from the first docstring I saw that I wanted to learn how to write them well. A docstring is text surrounded by two lines containing three quotes, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;This is a docstring. Docstrings give a short summary of the thing being 
documented here.

More detailed explanations can go after a blank line.

You can include example code for Python to use to test your program, too, 
like this:

&amp;gt;&amp;gt;&amp;gt; call_function(argument)
&quot;Put the expected output here! :)&quot;

&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is some actual code that will execute.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The beautiful thing about docstrings is that they generate documentation for you. Everything you put in a docstring appears in the Python console if someone calls &lt;code class=&quot;highlighter-rouge&quot;&gt;help()&lt;/code&gt; and passes the name of your function. So if you make a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;helpful_function()&lt;/code&gt; and include a docstring, a user could enter the following in the Python console to access your explanation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helpful_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And they’d see something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Help on function helpful_function in module __main__:

helpful_function()
    This is a function that does awesome stuff!

    It prints random cat pictures and gifs to make you smile.

    Expects files of the format:
    Cat Species | Image Type | Meme Preference | Number of Images
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Code inside a docstring doesn’t get executed as part of your program. But if you include code after a Python prompt and show the output you expect in the docstring, Python can generate tests for you. You can set those tests up to run automatically any time you run that file, to help you debug.&lt;/p&gt;

&lt;p&gt;I’ve already found myself going back to the docstrings I’ve written to remember what my functions do at a high level, and I find the documentation from the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;help()&lt;/code&gt; pretty useful. When your docstrings have the right information, someone should be able to call &lt;code class=&quot;highlighter-rouge&quot;&gt;help()&lt;/code&gt; to learn how to use your code without ever reading the source itself.&lt;/p&gt;

&lt;h1 id=&quot;commenting-all-the-things&quot;&gt;Commenting All the Things&lt;/h1&gt;

&lt;p&gt;In our labs, I’ve taken to commenting blocks of code as soon as I write them, which probably sounds tedious. In some ways it is annoying, especially if I’m excited about the program and just want to run it already.&lt;/p&gt;

&lt;p&gt;But trying to explain part of a program as you write it is useful because it prompts you to really think about your own solution. You’re already elbows deep in the guts of this problem, and your brain will probably never understand the solution as well as it does at that moment.&lt;/p&gt;

&lt;p&gt;When I’m done commenting, I like to step through the block I wrote like a computer and read my comment again to see if everything really works as I think it does. If I’m collaborating with someone, this is often a point where if I’ve mixed something up, they’ll catch it whether I do or not, which helps us find bugs faster, too.&lt;/p&gt;

&lt;p&gt;Commenting as you go is extra useful when you have to leave your program for a while and come back to finish it later. I don’t know how many times I would’ve been scratching my head for trying to figure out what some line was doing without my own comments there to tell me. If I hadn’t been commenting as part of my workflow, adding comments several hours later would’ve been more difficult.&lt;/p&gt;

&lt;p&gt;If docstrings are for people who don’t need to look at source code, comments are particularly important for anyone actually maintaining or collaborating on that source code. For instance, I’ve had TAs and pair programming partners come over to look at something I wrote without comments and get totally lost. But once I took a few minutes to comment the same block of code up (and style it a little better, with new lines between blocks for a clean progression of “ideas”), they were able to see where I was going.&lt;/p&gt;

&lt;h1 id=&quot;writing-useful-commit-messages&quot;&gt;Writing (Useful) Commit Messages&lt;/h1&gt;

&lt;p&gt;Commiting code to Git with descriptive commit messages is like giving your future self a roadmap into your project’s development. At some point, you’re going to make a ton of changes, realize you should’ve taken that left turn at Albuquerque, and not remember how to get back there manually. But if your commit messages clearly explain what’s changed with each commit, you should be able to read the log and get back.&lt;/p&gt;

&lt;p&gt;Commit messages don’t have to be novels, either; a single sentence (maybe two, or even just a few phrases) is usually enough. Keeping your messages short and to the point will probably encourage you to commit more often, too. Any time I notice that I have a lot to say in a commit, my last one didn’t happen recently enough.&lt;/p&gt;

&lt;p&gt;One of our lecture slides linked to a &lt;a href=&quot;https://xkcd.com/1296/&quot;&gt;very amusing xkcd&lt;/a&gt; about how easy it is to slip into writing nonsense Git commit messages. I’ve been trying to remember to be descriptive in my commit messages (admittedly, that doesn’t always happen yet…) because I’ve also had moments when I couldn’t remember where I left off in a project, and the commit log was super helpful.&lt;/p&gt;

&lt;p&gt;And of course, if someone’s following your project or collaborating with you, making sure they know how and why you made the changes you made can help them be consistent when adding code themselves.&lt;/p&gt;

&lt;h1 id=&quot;explaining-regularly-can-teach-you-to-think-faster&quot;&gt;Explaining Regularly Can Teach You to Think Faster&lt;/h1&gt;

&lt;p&gt;Apart from getting better at explaining code in general, I think all of these situations are also helping me think faster on my feet. I tend to be very methodical in my thought processes, so if I try to just speak on the fly, I can trip myself up. (That’s why I love writing so much–it gives me more time to process my thoughts.) But I really feel that I’m starting to organize my thoughts more quickly, which is fantastic.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quote of the Week:
“About half the bugs you’ll make in your life will be, “That thing is not what you thought it was!””
–Joel (Perhaps quoting someone else; I don’t recall.)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/hackbright/2016/07/11/On-Explaining-Well-and-Why-Its-Important.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/hackbright/2016/07/11/On-Explaining-Well-and-Why-Its-Important.html</guid>
        
        
        <category>Hackbright</category>
        
      </item>
    
      <item>
        <title>Python Is Kind of Beautiful</title>
        <description>&lt;p&gt;There. I said it: a programming language is beautiful. Now I’m one of &lt;em&gt;those&lt;/em&gt; people. I’m okay with this.&lt;/p&gt;

&lt;p&gt;Kidding aside, I really never thought I’d describe a programming language with that word. Assembly is appealing to me not because it’s elegant but because when you use it, you have to understand every single little step the computer is taking to make something happen. I find C appealing because while it abstracts away a lot, there’s still not much magic to it. Everything goes in a particular place, you have to manage memory carefully, and pointers are pretty cool. Of course, C also gives you enough rope to hang yourself, but hey–debugging is half the fun, right?&lt;/p&gt;

&lt;p&gt;Given all that, I honestly wasn’t sure how much I’d like Python. I’ve always gotten a lot of satisfaction out of being able to see what’s going on under the hood and to understand what I’m seeing in a program. Python is growing on me, though. Being able to basically read your program like English without actually translating it to pseudocode is fantastic, and it makes Python a great option for beginners.&lt;/p&gt;

&lt;p&gt;Anyway, I learned a couple of really fascinating things this week that I wanted to jot down.&lt;/p&gt;

&lt;h1 id=&quot;slices-are-cool&quot;&gt;Slices Are Cool&lt;/h1&gt;

&lt;p&gt;There are a couple of Python elements that I had trouble getting my head around before Hackbright. Slicing is one of those elements. When you slice a list, set, or tuple, you’re asking Python to give you the elements from one index up to but not including another. A slice looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s an example with actual values:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;some_stuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this code, &lt;code class=&quot;highlighter-rouge&quot;&gt;some_stuff&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2]&lt;/code&gt;. When I first started messing with Python, I found the “up to but not including” part a little tricky. And don’t even get me started on stepping. Now, after some pair programming practice and a great homework assignment, I feel a lot more comfortable slicing things up, and I think the feature is pretty awesome. My favorite thing about slices is how Python always gives a simple, logical answer when you try to slice out of bounds. For instance, a line sort of like this appeared on one of our slides:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# This slice gives [].&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; is an empty list. Rather than give an error, Python basically says, “You want the stuff from indices 42 and up? There is no index 99, so there are no elements. That means the list of stuff from those indices is empty.” Pretty neat, right?&lt;/p&gt;

&lt;p&gt;Some other interesting slices:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#Gives [0, 1]  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#Gives [3, 2, 1, 0]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#Gives []&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First thing to note: In Python, you can have negative indices! They index from the end, where the last element in the list is at index -1. This gives you a super convenient way to work from the end of a list in Python, something that can be much more frustrating in other languages.&lt;/p&gt;

&lt;p&gt;In any case, the first slice above gives the elements from indices 0 to -2. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;stuff[:-2]&lt;/code&gt; is 2, you end up with the first two elements. The second slice above shows how combining a negative start index with a negative step value can let you reverse the list. The third slice is another great example of Python’s logic at work. There’s nothing in this list from indices 10 up to but not including 20, so the slice just gives an empty list.&lt;/p&gt;

&lt;h1 id=&quot;in-python-memory-actually-acts-like-a-box&quot;&gt;In Python, Memory Actually Acts Like a Box&lt;/h1&gt;

&lt;p&gt;You know how I like to know what’s going on under the hood in a program? Well, one lecture this week was all about memory, so I was psyched. And I discovered that some memory-related aspects of Python don’t work like I expected them to.&lt;/p&gt;

&lt;p&gt;Take variables, for example. In other languages, if you assign a value to a variable and then assign a new value, the old value gets overwritten in memory, never to be heard from again. It seems like an efficient system, especially since you don’t necessarily need to implement garbage collection. (Disclaimer: I don’t pretend to know it actually is efficient.)&lt;/p&gt;

&lt;p&gt;But think about how that might work in the physical world. Say you’ve got a box with a d6 in it. You want to play D&amp;amp;D, so you want to put a d20 in the box instead. You take the d6 out, place the d20 inside, and put the d6 outside the box. The d6 doesn’t poof out of existence–the box just no longer contains it.&lt;/p&gt;

&lt;p&gt;That’s how memory works in Python–it’s like a box. Boxes are a pretty standard metaphor for memory, but this is the first time I’ve seen a system that works so much like the classic metaphor in practice.&lt;/p&gt;

&lt;p&gt;Lists demonstrate the concept better, though. Say you’re looking at the following box:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;game_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencils&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;notepad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;holy staff&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, your friend wants to ride to D&amp;amp;D with you, so you ask her to check the box to make sure she has everything. You might say:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game_box&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In other languages, &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; would be a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;game_box&lt;/code&gt;, and changing &lt;code class=&quot;highlighter-rouge&quot;&gt;game_box&lt;/code&gt; wouldn’t affect &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; at all. Not so in Python. All you’ve done is put another sharpie label on the box.&lt;/p&gt;

&lt;p&gt;Your friend says, “I’m an archer, so I want to bring my bow and arrows to help me get into character.” (You’re playing a cleric, hence the holy staff.) So, you add her bow and arrows to &lt;code class=&quot;highlighter-rouge&quot;&gt;our_box&lt;/code&gt; so she can get totally in character.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;our_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;d20&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pencils&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;notepad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;holy staff&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;bow and arrows&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since you and your friend are still looking at the same box, &lt;code class=&quot;highlighter-rouge&quot;&gt;game_box&lt;/code&gt; should now include &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;bow and arrows&#39;&lt;/code&gt; as well. I think Python 3 may have changed this, because it doesn’t work in the Python 3.4.3 Shell version of IDLE, but we’re using Python 2 at Hackbright, and that memory weirdness totally works there.&lt;/p&gt;

&lt;p&gt;This whole concept seemed so crazy to me at first, but once I started visualizing memory as a box that multiple people can look at, everything started making a lot more sense. It’s kind of an elegant way of handling rebinding values, and the analog to something in the physical world just works so well.&lt;/p&gt;

&lt;p&gt;I’ve been doodling visuals whenever I find a useful metaphor like this during lecture. Maybe I’ll draw those up and post them sometime…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quote of the day: 
“Wherever there’s an equals sign in Python, an arrow is being drawn somewhere.”
– A wise Hackbright instructor&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/hackbright/2016/07/08/Python-Is-Kind-of-Beautiful.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/hackbright/2016/07/08/Python-Is-Kind-of-Beautiful.html</guid>
        
        
        <category>Hackbright</category>
        
      </item>
    
      <item>
        <title>Two Days In</title>
        <description>&lt;p&gt;I’m two days into the engineering fellowship at &lt;a href=&quot;https://hackbrightacademy.com/&quot;&gt;Hackbright Academy&lt;/a&gt;, and while a lot of the computer science concepts have been overall a review, I’m still learning a ton.&lt;/p&gt;

&lt;p&gt;These are some of my takeaways so far, in no particular order.&lt;/p&gt;

&lt;h1 id=&quot;pair-programming-is-the-best&quot;&gt;Pair Programming is The Best&lt;/h1&gt;

&lt;p&gt;Literally. I can’t imagine a better way to solidify concepts than by using a pair programming system. I often tend to sketch solutions to problems at a high level and then dive into the code, but when you’re driving in a pair programming scenario, you can’t just try all the things. When you’re navigating, you have to collect your thoughts and explain them so that someone else can understand your reasoning.&lt;/p&gt;

&lt;p&gt;Pair programming really teaches you to step back, read the requirements for a project, plan your algorithm accordingly, and step through the code as you go. You might not get everything right the first time, but that’s okay. Having another full set of brain cells on the project makes debugging and refactoring much easier.&lt;/p&gt;

&lt;p&gt;I’m really looking forward to learning from my peers like this for the rest of the fellowship!&lt;/p&gt;

&lt;h1 id=&quot;the-linux-command-line-is-amazing&quot;&gt;The Linux Command Line Is Amazing&lt;/h1&gt;

&lt;p&gt;I haven’t done much with Linux in years, but between my own dabblings with Python, revisiting &lt;em&gt;Hacking: The Art of Exploitation&lt;/em&gt;, and starting at Hackbright, I have a renwewed appreciation for the command line. It’s so much faster to just do everything from the keyboard that I’m starting to resent clicking icons a little bit.&lt;/p&gt;

&lt;h1 id=&quot;git-isnt-so-bad&quot;&gt;Git Isn’t So Bad&lt;/h1&gt;

&lt;p&gt;Admittedly, I was intimidated by Git and GitHub before I started my freelance technical writing/editing work this summer. Using Git and GitHub for that helped ease me into version control, and while I’m still a little shaky at times whet it comes to getting things to GitHub, today’s lecture on Git won me over.&lt;/p&gt;

&lt;p&gt;My pair programming partner and I managed to completely overwrite our awesome solution to the day’s lab challenge, seemingly with no way to get the original contents back. Fortunately, however, we’d committed our last working code file to our project repo. After entering a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard&lt;/code&gt; command, we were back in business.&lt;/p&gt;

&lt;h1 id=&quot;read-the-docs&quot;&gt;Read the Docs&lt;/h1&gt;

&lt;p&gt;Stuck on a concept? Go to the docs. Man pages are great, the Python docs are really informative (if more than a little bit dense…I’m glad I have cheat sheets for syntax), and if those aren’t as helpful as you’d like, someone probably had your question on Stack Overflow already.&lt;/p&gt;

&lt;p&gt;I learned to just suck it up and read the docs ages ago, mostly when building circuits (the docs are the only way to learn how a chip works!), but I’m relearning the concept in full force at the moment. And hey, now I know how &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;except&lt;/code&gt; work. Thanks, docs!&lt;/p&gt;

&lt;h1 id=&quot;write-good-documentation&quot;&gt;Write Good Documentation&lt;/h1&gt;

&lt;p&gt;I knew this going in: I’ve edited plenty of programming books, and when I do code myself, I tend to comment things most of the time, especially when I’m learning a new language. But seriously, the only way you’re going to remember what your code does an hour from now when you come back to it (nevermind anyone else who needs to read it) is by commenting it up. To that end, I’m planning to make good use of docstrings.&lt;/p&gt;

&lt;h1 id=&quot;taking-care-of-yourself-is-key&quot;&gt;Taking Care of Yourself is Key&lt;/h1&gt;

&lt;p&gt;On Day 1, I didn’t eat properly, I didn’t get enough sleep, and I felt…well, not great, at the end of the day. If you’re going to survive a bootcamp, you have to take care of yourself. Take time for breakfast, don’t skimp on lunch (include protein!), drink plenty of water, and if you know you’ll go stir crazy, take a walk during lunch break. And if you need a moment of alone time during lunch, take it.&lt;/p&gt;

&lt;h1 id=&quot;you-dont-need-your-devices&quot;&gt;You Don’t Need Your Devices&lt;/h1&gt;

&lt;p&gt;Putting my phone on “Do Not Disturb” from 10 AM to 6 PM is kind of amazing. I recommend it to anyone who wants to have a less distracting, more productive day. The emails and social media notifications will still be there at the end of the day, I promise.&lt;/p&gt;

&lt;p&gt;Putting my laptop away for all of the daylight hours is pretty amazing, too. I thought I’d go crazy not being able to take notes on my computer, but honestly, I’m staying much more engaged than I could if I had my computer on. (Okay, friends, you can say “I told you so” now. You know who you are.)&lt;/p&gt;

&lt;p&gt;Anyway, that’s the end of tonight’s braindump. Time to get some sleep!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quote of the day: 
“And pair programming was hella chill.”
–From an in-class demo&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 06 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://jgriffith23.github.io/hackbright/2016/07/06/Two-Days-In.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/hackbright/2016/07/06/Two-Days-In.html</guid>
        
        
        <category>Hackbright</category>
        
      </item>
    
      <item>
        <title>My First Post!</title>
        <description>&lt;p&gt;I’m testing out my new GitHub blog setup with Jekyll. Since I’m about to learn a ton of Python, let’s start with a little &lt;em&gt;Hello World&lt;/em&gt; program. It is tradition after all.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 22:06:54 -0700</pubDate>
        <link>http://jgriffith23.github.io/learning/2016/06/30/My-First-Post.html</link>
        <guid isPermaLink="true">http://jgriffith23.github.io/learning/2016/06/30/My-First-Post.html</guid>
        
        
        <category>learning</category>
        
      </item>
    
  </channel>
</rss>
